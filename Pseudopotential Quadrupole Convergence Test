import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from random import shuffle
from tqdm import tqdm

class Ion():

    def __init__(self, mass, N, temp, species, mode):
        """Initialise initial positions, velocities, 
        mass, atomic state of an ion ensemble.
        
        Args:
            mass (float): mass of an ion
            
            N (int): number of ions in the ensemble
        """

        # Save the initial conditions to compare the simulations with different timesteps
        if mode == "save":
            self.x, self.y, self.z = self.InitialPositions(N)
            self.vx, self.vy, self.vz = self.InitialVelocities(N, mass, temp)

            with open('Initial Positions' + species + '.npy', 'wb') as f:
                np.save(f, self.x)
                np.save(f, self.y)
                np.save(f, self.z)

            with open('Initial Velocities' + species + '.npy', 'wb') as f:
                np.save(f, self.vx)
                np.save(f, self.vy)
                np.save(f, self.vz)


        elif mode == "load":
            # Load the initial conditions to make them the same for all simulations
            with open('Initial Positions' + species + '.npy', 'rb') as f:
                self.x = np.load(f)
                self.y = np.load(f)
                self.z = np.load(f)

            with open('Initial Velocities' + species + '.npy', 'rb') as f:
                self.vx = np.load(f)
                self.vy = np.load(f)
                self.vz = np.load(f)

        self.mass = mass
        self.N = N
        self.state = np.array(["g" for _ in range(N)])


    def InitialPositions(self, N):
        """Generate an array of uniformly
        distributed particle positions over
        a sphere of radius R. 
        
        Args:
            N (int): number of ions in the ensemble
        
        Returns:
            x, y, z (float): arrays with Cartesian
            coordinates of ions
        """

        # Cylindrical polar coords
        phi = np.random.uniform(0, 2*np.pi, N)
        z = np.random.uniform(-0.1*10**(-3), 0.1*10**(-3), N)
        r = np.zeros(N)
        for n in range(N):
            r[n] = self.AcceptRejectRadius(R)

        x = r*np.cos(phi)
        y = r*np.sin(phi)

        self.PlotPositions(x, y, z)

        return x, y, z


    def InitialVelocities(self, N, mass, temp):
        """Generate an array of isotropic
        Maxwellian velocities for a given
        temperature. Isotropic means that 
        the velocity directions are
        distributed uniformly over a unit
        sphere.

        Args:
            N (int): number of ions in the ensemble
            
            mass (float): mass of an ion
            
        Returns:
            vx, vy, vz (float): arrays with Cartesian
            velocities of ions
        """

        # Assume velocities to be isotropic over a unit sphere
        phi = np.random.uniform(0, 2*np.pi, N)
        theta = np.zeros(N)
        v = np.zeros(N)

        for n in range(N):
            theta[n] = self.AcceptRejectTheta()
            v[n] = self.AcceptRejectMaxwell(mass, temp)

        vx = v * np.cos(phi) * np.sin(theta)
        vy = v * np.sin(phi) * np.sin(theta)
        vz = v * np.cos(theta)

        self.PlotVelocityDirections(phi, theta)
        self.PlotSpeeds(v, mass)

        return vx, vy, vz


    def Maxwellian(v, T, mass):
        """Normalised Maxwellian velocity distribution
        in 3D.
        
        Args:
            v (float): ion velocity
            
            T (float): temperature of the ion
            ensemble
            
            mass (float): mass of an ion
            
        Returns:
            (float): value of the Maxwellian pdf
        """    

        return (mass/(2*np.pi*k_B*T))**(3/2) * 4*np.pi*v**2 * np.exp(-mass*v**2/(2*k_B*T))


    def AcceptRejectMaxwell(self, mass, temp):
        """The Accept/Reject method replicates a distribution f(x) by following,
        the following algorithm: 1) generate uniformly distributed random numbers,
        x and y; 2) if y < f(x), accept the value, reject otherwise, 3) Repeat.
    
        Args:
            mass (float): mass of an ion
            
        Returns:
            v (float): velocity of an ion which is obtained using the pdf
            of a Maxwellian velocity distribution.
        """

        while True:
            v = 100 * np.random.rand()
            y = Ion.Maxwellian(np.sqrt(2*k_B*temp/mass), temp, mass) * np.random.rand()
            if y < Ion.Maxwellian(v, temp, mass):
                return v
            else:
                continue


    def AcceptRejectTheta(self):
        """The Accept/Reject method replicates a distribution f(x) by following,
        the following algorithm: 1) generate uniformly distributed random numbers,
        x and y; 2) if y < f(x), accept the value, reject otherwise, 3) Repeat.
    
        Returns:
            theta (float): polar angle for the isotropic distribution over
            a unit sphere, range = [0, pi]
        """

        while True:
            theta = np.pi * np.random.rand()
            y = 0.5 * np.random.rand()
            if y < 0.5 * np.sin(theta):
                return theta
            else:
                continue    


    def AcceptRejectRadius(self, R):
        """The Accept/Reject method replicates a distribution f(x) by following,
        the following algorithm: 1) generate uniformly distributed random numbers,
        x and y; 2) if y < f(x), accept the value, reject otherwise, 3) Repeat.

        Args:
            R (float): radius of the sphere over which the ions are uniformly
            distributed
        
        Returns:
            r (float): radial position for initial positions of ions such 
            that they are uniformly distributed over a sphere of radius R,
            range = [0, R]
        """
    
        while True:
            r = R * np.random.rand()
            y = (2/R) * np.random.rand()
            if y < 2 * r/(R**2):
                return r
            else:
                continue


    def PlotPositions(self, x, y, z):     
        """Generate a 3D plot for intial positions
        of ions.
        
        Args:
            x, y, z (float): arrays with Cartesian
            coordinates of ions
        """
        
        X, Y, Z = (10**3)*x, (10**3)*y, (10**3)*z

        figure, (ax1, ax2) = plt.subplots(1, 2, figsize = (10,4), gridspec_kw={'width_ratios': [3, 2]})

        #XZ-plane
        ax1.plot(Z, X, 'o', markersize = 4, mec = 'k', mfc = pantone)

        #XY-plane
        ax2.plot(Y, X, 'o', markersize = 4, mec = 'k', mfc = pantone)

        ax1.set_ylabel("X [$mm$]", **font, size = 18)
        ax1.set_xlabel("Z [$mm$]", **font, size = 18)
        ax2.set_xlabel("Y [$mm$]", **font, size = 18)

        ax1.tick_params(axis="y", direction="in")
        ax1.tick_params(axis="x", direction="in")
        ax2.tick_params(axis="y", direction="in")
        ax2.tick_params(axis="x", direction="in")

        ax1.yaxis.set_ticks_position('both')
        ax1.xaxis.set_ticks_position('both')
        ax2.yaxis.set_ticks_position('both')
        ax2.xaxis.set_ticks_position('both')

        ax1.axis([-1.2, 1.2, -0.6, 0.6])
        ax2.axis([-0.15, 0.15, -0.15, 0.15])

        plt.savefig("Initial Positions.pdf")
        plt.show()


    def PlotSpeeds(self, v, mass):
        """Generate a histogram for intial speeds
        of ions.

        Args:
            v (float): array with ion speeds

            mass (float): mass of an ion
        """

        fig, ax = plt.subplots(1, 1, figsize = (7, 4))

        ax.hist(v, bins = 20, facecolor = pantone, alpha = 0.75, density = True, range = (0, 40))
        ax.set_xlabel("Velocity [m/s]", **font, size = 15)
        ax.set_ylabel("PDF [s/m]", **font, size = 15)
        #plt.title("Initial speed distribution", **font, size = 15)

        ax.grid(axis = 'y')
        ax.tick_params(axis="y", direction="in")
        ax.tick_params(axis="x", direction="in")
        
        ax.yaxis.set_major_locator(MaxNLocator(integer=True)) # Restrain the y-tics to integers

        # Fit a Maxwellian curve to the velocity distributions
        v_RMS = np.sqrt(np.mean(v**2))
        Temperature = mass*v_RMS**2/(3*k_B)
        x = np.linspace(0, 40, 100)

        print("Initial temperature: ")
        print(np.round(Temperature, 2))
        ax.plot(x, Ion.Maxwellian(x, Temperature, mass), color = orange, linestyle = 'dashed', linewidth = 3, label = "Maxwellian")

        plt.legend(prop={'size': 15})
        plt.savefig("Initial Speeds.pdf")
        plt.show()


    def PlotVelocityDirections(self, phi, theta):
        """Generate histograms for the polar and
        azimuthal angles of the inital ion directions
        
        Args:
            phi (float): array with azimuthal angles, range = [0, 2*pi]
            
            theta (float): array with polar angles, range = [0, pi]
        """

        figure, (ax1, ax2) = plt.subplots(1, 2, figsize = (10,5))

        ax1.hist(phi, bins = 20, color = pantone, alpha = 0.75, density = True)
        ax1.set_xlabel("$\phi$ [rad]", **font, size = 18)
        ax1.set_ylabel("PDF [$rad^{-1}$]", **font, size = 18)
        #ax1.set_title("Azimuthal angle distribution", **font, size = 15)
        ax1.plot(np.linspace(0, 2*np.pi, 100), (1/(2*np.pi))*np.ones(100), color = orange, linestyle = 'dashed', linewidth = 3, label = "Uniform")
        ax1.set_xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi])
        ax1.set_xticklabels(['$0$', '$\pi/2$', '$\pi$', '$3\pi/2$', '$2\pi$'])

        ax2.hist(theta, bins = 20, color = pantone, alpha = 0.75, density = True)
        ax2.set_xlabel("$\Theta$ [rad]", **font, size = 18)
        #ax2.set_ylabel("PDF", **font, size = 18)
        #ax2.set_title("Polar angle distribution", **font, size = 15)
        ax2.plot(np.linspace(0, np.pi, 100), 0.5 * np.sin(np.linspace(0, np.pi, 100)), color = orange, linestyle = 'dashed', linewidth = 3, label = "Sine")
        ax2.set_xticks([0, np.pi/4, np.pi/2, 3*np.pi/4, np.pi])
        ax2.set_xticklabels(['$0$', '$\pi/4$', '$\pi/2$', '$3\pi/4$', '$\pi$'])


        ax1.yaxis.set_major_locator(MaxNLocator(integer=True)) # Restrain the y-tics to integers
        ax2.yaxis.set_major_locator(MaxNLocator(integer=True)) # Restrain the y-tics to integers

        ax1.grid(axis = 'y')
        ax2.grid(axis = 'y')
        ax1.tick_params(axis="y", direction="in")
        ax1.tick_params(axis="x", direction="in")
        ax2.tick_params(axis="y", direction="in")
        ax2.tick_params(axis="x", direction="in")
        ax1.legend(prop={'size': 18})
        ax2.legend(prop={'size': 18})

        plt.savefig("Initial Directions.pdf")
        plt.show()


def PseudoPotential(r, z, a, q, m):
    """Quadrupole pseudoforce due to the oscillating
    RF force.
    
    Args:
        m (float): mass of the particle, [kg]
        
        r (float): radial distance of the particle from
        the centre of the potential well, [m]
    
    Returns:
        (float): restoring force, [N]
    """    

    return (m*(w**2)*(a+((q**2)/2)) * (r**2) / 8) - (m * (w**2) * a * (z**2) / 4)


def RadialPseudoForce(m, r, a, q):
    """Quadrupole pseudoforce due to the oscillating
    RF force.
    
    Args:
        m (float): mass of the particle, [kg]
        
        r (float): radial distance of the particle from
        the centre of the potential well, [m]
    
    Returns:
        (float): restoring force, [N]
    """    

    return -m*(w**2)*(a+((q**2)/2)) * r / 4


def XRFForce(m, x, t, a, q):
    """RF-Force in the x-direction calculated
    from the Mathieu equation for a linear Paul
    trap. 
    
    Args:
        m (float): mass of the particle, [kg]
        
        x (float): x-distance of the particle
        from the centre of the potential well, [m]
        
        t (float): time of the simulation, [s]
        
    Returns:
        (float): force, [N]
    """

    return m * (-a+2*q*np.cos(w*t)) * ((w**2)/4) * x


def YRFForce(m, y, t, a, q):
    """RF-Force in the y-direction calculated
    from the Mathieu equation for a linear Paul
    trap. 
    
    Args:
        m (float): mass of the particle, [kg]
        
        y (float): y-distance of the particle
        from the centre of the potential well, [m]
        
        t (float): time of the simulation, [s]
        
    Returns:
        (float): force, [N]
    """
    

    return m * (-a-2*q*np.cos(w*t)) * ((w**2)/4) * y


def ZPseudoForce(m, z, a, q):
    """Force due to the DC endcap potential.

    Args:
        z (float): axial distance of the particle
        from the centre of the potential well, [m]

        t (float): time of the simulation, [s]

    Returns:
        (float): force, [N]. The parameter A is
        obtained from COMSOL simulations.
    """

    return m * (w**2) * a * z / 2


def CoulombForce(x, y, z, N):
    """Calculate force due to particle-particle
    interactions.
    
    Args:
        x, y, z (float): arrays with cartesian
        coordinates of Ba+ and BaH+ ions
        
        N (int): number of particles
        
    Returns:
        xForce, yForce, zForce (float): arrays with
        forces for N particles, [N].
    """

    xForce = np.zeros(N)    
    yForce = np.zeros(N)
    zForce = np.zeros(N)    

    for j in range(N):
        dist = np.sqrt((x-x[j])**2 + (y-y[j])**2 + (z-z[j])**2)

        xForce += np.where(dist != 0, (1/(4*np.pi*permittivity))*(charge**2)*(x-x[j])/(dist**3), 0)
        yForce += np.where(dist != 0, (1/(4*np.pi*permittivity))*(charge**2)*(y-y[j])/(dist**3), 0)
        zForce += np.where(dist != 0, (1/(4*np.pi*permittivity))*(charge**2)*(z-z[j])/(dist**3), 0)

    return xForce, yForce, zForce


def CoulombPotential(x, y, z, N):
    """Calculate force due to particle-particle
    interactions.
    
    Args:
        x, y, z (float): arrays with cartesian
        coordinates of Ba+ and BaH+ ions
        
        N (int): number of particles
        
    Returns:
        xForce, yForce, zForce (float): arrays with
        forces for N particles, [N].
    """

    potential = np.zeros(N)    

    for j in range(N):
        dist = np.sqrt((x-x[j])**2 + (y-y[j])**2 + (z-z[j])**2)

        potential += np.where(dist != 0, (1/(4*np.pi*permittivity))*(charge**2)/dist, 0)

    return potential


def EvolveEuler(Ba, BaH, dt):
    """Euler method. During each timestep evolve
    ions using Mathieu equations, add Coulomb
    interactions and then laser cool. Save the
    velocities over the last secular period and
    positions at the last time step.

    Args:
        Ba (obj): object containing parameters
        of a Ba+ ion such as position and velocities
    
        BaH (obj): object containing parameters
        of a BaH+ ion such as position and velocities
    
        mode (str): trigger laser cooling
    """

    T = int(time/dt) # number of timesteps for the whole simulation
    T_step = int(t_step/dt) # number of simulation timesteps in a convergence timestep

    Ba_x = np.array([])
    Ba_y = np.array([])
    Ba_z = np.array([])
    BaH_x = np.array([])
    BaH_y = np.array([])
    BaH_z = np.array([])
    
    Ba_vx = np.array([])
    Ba_vy = np.array([])
    Ba_vz = np.array([])
    BaH_vx = np.array([])
    BaH_vy = np.array([])
    BaH_vz = np.array([])

    for t in tqdm(range(T), desc="Calculating Euler's method..."):

        # Merge Ba and BaH positions and velocities
        # The data is saved such that the Ba+ data comes first followed by the BaH+ data
        x = np.concatenate((Ba.x, BaH.x))
        y = np.concatenate((Ba.y, BaH.y))
        z = np.concatenate((Ba.z, BaH.z))

        if t%T_step == 0:   
            Ba_x = np.append(Ba_x, Ba.x)
            Ba_y = np.append(Ba_y, Ba.y)
            Ba_z = np.append(Ba_z, Ba.z)
            BaH_x = np.append(BaH_x, BaH.x)
            BaH_y = np.append(BaH_y, BaH.y)
            BaH_z = np.append(BaH_z, BaH.z)

            Ba_vx = np.append(Ba_vx, Ba.vx)
            Ba_vy = np.append(Ba_vy, Ba.vy)
            Ba_vz = np.append(Ba_vz, Ba.vz)
            BaH_vx = np.append(BaH_vx, BaH.vx)
            BaH_vy = np.append(BaH_vy, BaH.vy)
            BaH_vz = np.append(BaH_vz, BaH.vz)

        XCoulombForce, YCoulombForce, ZCoulombForce = CoulombForce(x, y, z, Ba.N + BaH.N)
        XCoulombForceBa, YCoulombForceBa, ZCoulombForceBa = XCoulombForce[:Ba.N:], YCoulombForce[:Ba.N:], ZCoulombForce[:Ba.N:]
        XCoulombForceBaH, YCoulombForceBaH, ZCoulombForceBaH = XCoulombForce[Ba.N::], YCoulombForce[Ba.N::], ZCoulombForce[Ba.N::]

        Ba.vx = Ba.vx + ((RadialPseudoForce(Ba.mass, Ba.x, a_lc, q_lc) + XCoulombForceBa)/Ba.mass)*dt
        Ba.vy = Ba.vy + ((RadialPseudoForce(Ba.mass, Ba.y, a_lc, q_lc) + YCoulombForceBa)/Ba.mass)*dt
        Ba.vz = Ba.vz + ((ZPseudoForce(Ba.mass, Ba.z, a_lc, q_lc) + ZCoulombForceBa)/Ba.mass)*dt
        Ba.x = Ba.x + Ba.vx*dt
        Ba.y = Ba.y + Ba.vy*dt
        Ba.z = Ba.z + Ba.vz*dt

        BaH.vx = BaH.vx + ((RadialPseudoForce(BaH.mass, BaH.x, a_sc, q_sc) + XCoulombForceBaH)/BaH.mass)*dt
        BaH.vy = BaH.vy + ((RadialPseudoForce(BaH.mass, BaH.y, a_sc, q_sc) + YCoulombForceBaH)/BaH.mass)*dt
        BaH.vz = BaH.vz + ((ZPseudoForce(BaH.mass, BaH.z, a_sc, q_sc) + ZCoulombForceBaH)/BaH.mass)*dt
        BaH.x = BaH.x + BaH.vx*dt
        BaH.y = BaH.y + BaH.vy*dt
        BaH.z = BaH.z + BaH.vz*dt

    with open('Positions.npy', 'wb') as f:
        np.save(f, Ba_x)
        np.save(f, Ba_y)
        np.save(f, Ba_z)
        np.save(f, BaH_x)
        np.save(f, BaH_y)
        np.save(f, BaH_z)

    with open('Speeds.npy', 'wb') as f:
        np.save(f, Ba_vx)
        np.save(f, Ba_vy)
        np.save(f, Ba_vz)
        np.save(f, BaH_vx)
        np.save(f, BaH_vy)
        np.save(f, BaH_vz)


def PlotSpeeds(v_Ba, v_BaH):
    
    """Plot velocity distributions during the
    last secular period of the simulation. Fit
    it to the Maxwellian curve and calculate
    the RMS velocity.
    
    Args:
        v_Ba, v_BaH (float): array containing
        Cartesian velocities of barium and
        barium hydride ions for the last
        secular period of the simulation,
        respectively.
    """ 

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))

    x1 = np.linspace(0, 50, 100)
    x2 = np.linspace(0, 50, 100)

    ax1.hist(v_Ba, bins = 20, facecolor = pantone, alpha = 0.75, density = True, range = (0, 50))
    #ax1.axvline(np.sqrt(np.mean(v_Ba**2)), color = 'k', linestyle = 'dashed', linewidth = 2, label = "RMS Velocity")

    v_Ba = np.delete(v_Ba, np.argwhere(v_Ba > 50))
    v_Ba_RMS = np.sqrt(np.mean(v_Ba**2))
    T_Ba = m_Ba*v_Ba_RMS**2/(3*k_B)

    print("Ba temperature: ")
    print(str(np.round(T_Ba, 2)) + " K")
    ax1.plot(x1, Ion.Maxwellian(x1, T_Ba, m_Ba), color = orange, linestyle = 'dashed', linewidth = 3, label = "Maxwellian")

    ax1.set_xlabel("Velocity [m/s]", **font, size = 15)
    ax1.set_ylabel("PDF [s/m]", **font, size = 15)
    ax1.set_title("$Ba^+$", **font, size = 15)
    ax1.grid(axis = 'y')
    #plt.xlim(0, 6)
    #ax1.axis([0, 60, 0, 0.05])
    ax1.tick_params(axis="y", direction="in")
    ax1.tick_params(axis="x", direction="in")
    ax1.legend()

    ax2.hist(v_BaH, bins = 20, facecolor = pantone, alpha = 0.75, density = True, range = (0, 50))
    #ax2.axvline(np.sqrt(np.mean(v_BaH**2)), color = 'k', linestyle = 'dashed', linewidth = 2, label = "RMS Velocity")

    v_BaH = np.delete(v_BaH, np.argwhere(v_BaH > 50))
    v_BaH_RMS = np.sqrt(np.mean(v_BaH**2))
    T_BaH = m_Ba*v_BaH_RMS**2/(3*k_B)

    print("BaH temperature: ")
    print(str(np.round(T_BaH, 2)) + " K")
    ax2.plot(x2, Ion.Maxwellian(x2, T_BaH, m_BaH), color = orange, linestyle = 'dashed', linewidth = 3, label = "Maxwellian")

    ax2.set_xlabel("Velocity [m/s]", **font, size = 15)
    ax2.set_ylabel("PDF [s/m]", **font, size = 15)
    ax2.set_title("$BaH^+$", **font, size = 15)
    ax2.grid(axis = 'y')
    #plt.xlim(0, 6)
    #ax2.axis([0, 60, 0, 0.05])
    ax2.tick_params(axis="y", direction="in")
    ax2.tick_params(axis="x", direction="in")
    #ax2.legend()

    plt.savefig("Final Speeds.pdf")
    plt.show()


def PlotPositions(BaPositions, BaHPositions):
    """Plot the positions of Ba+ and BaH+
    ions at the end of the simulation in
    the XZ and XY planes.

    Args:
        BaPositions (float): Positions of the
        Ba+ ions at the end of the simulation

        BaHPositions (float): Positions of the
        BaH+ ions at the end of the simulation
        
        temp (float): initial temperature of
        the simulation, used for reading the 
        file
    """

    BaX, BaY, BaZ = (10**6)*BaPositions
    BaHX, BaHY, BaHZ = (10**6)*BaHPositions

    figure, (ax1, ax2) = plt.subplots(1, 2, figsize = (10,4), gridspec_kw={'width_ratios': [3, 2]})

    #XZ-plane
    ax1.plot(BaZ, BaX, 'o', markersize = 5, mec = 'k', mfc = pantone, label = '$Ba^+$')
    ax1.plot(BaHZ, BaHX, 'o', markersize = 5, mec = 'k', mfc = 'w', label = '$BaH^+$')

    #XY-plane
    ax2.plot(BaY, BaX, 'o', markersize = 5, mec = 'k', mfc = pantone)
    ax2.plot(BaHY, BaHX, 'o', markersize = 5, mec = 'k', mfc = 'w')

    # Add a circle separating cooled particles from uncooled
    # radius = (10**6)*np.max(np.abs(np.sqrt(BaPositions[0]**2 + BaPositions[1]**2 + BaPositions[2]**2)))
    # phi = np.linspace(0, 2*np.pi, 100)
    # x = radius * np.cos(phi)
    # y = radius * np.sin(phi)
    # ax1.plot(x, y, 'r-')
    # ax2.plot(x, y, 'r-')

    # Get rid of vertical ticks in the XY-plane plot
    #ax2.tick_params(labelleft = False)

    ax1.set_ylabel("X [$\mu m$]", **font, size = 18)
    ax1.set_xlabel("Z [$\mu m$]", **font, size = 18)
    ax2.set_xlabel("Y [$\mu m$]", **font, size = 18)

    ax1.tick_params(axis="y", direction="in")
    ax1.tick_params(axis="x", direction="in")
    ax2.tick_params(axis="y", direction="in")
    ax2.tick_params(axis="x", direction="in")

    ax1.yaxis.set_ticks_position('both')
    ax1.xaxis.set_ticks_position('both')
    ax2.yaxis.set_ticks_position('both')
    ax2.xaxis.set_ticks_position('both')

    ax1.axis([-1300, 1300, -650, 650])
    ax2.axis([-150, 150, -150, 150])

    # x1 = np.linspace(-1200, 1200, 5, dtype = int)
    # y1 = np.linspace(-600, 600, 7, dtype = int)

    # ax1.set_yticklabels(y1, fontsize = 15, **font)
    # ax1.set_xticklabels(x1, fontsize = 15, **font)

    # x2 = np.linspace(-100, 100, 5, dtype = int)
    # y2 = np.linspace(-100, 100, 9, dtype = int)

    # ax2.set_yticklabels(y2, fontsize = 15, **font)
    # ax2.set_xticklabels(x2, fontsize = 15, **font)

    ax1.legend(loc = "upper right", prop={'size': 18}, markerscale = 1)
    plt.savefig("Final Positions.pdf")
    plt.show()


def TotalEnergy(Ba_x, BaH_x, Ba_y, BaH_y, Ba_z, BaH_z, Ba_v, BaH_v):
    """Find the total energy in meV to check if it is conserved. """
    
    KE_Ba_total = np.zeros(timesteps)
    KE_BaH_total = np.zeros(timesteps)
    PPE_Ba_total = np.zeros(timesteps)
    PPE_BaH_total = np.zeros(timesteps)
    CPE_Ba_total = np.zeros(timesteps)
    CPE_BaH_total = np.zeros(timesteps)

    # Calculate the radial distance
    Ba_r = np.sqrt(Ba_x**2 + Ba_y**2)
    BaH_r = np.sqrt(BaH_x**2 + BaH_y**2)

    # Calculate the kinetic energies
    KE_Ba = m_Ba*(Ba_v**2)/2
    KE_BaH = m_BaH*(BaH_v**2)/2
    
    # Calculate the pseudopotential energy
    PPE_Ba = PseudoPotential(Ba_r, Ba_z, a_lc, q_lc, m_Ba)
    PPE_BaH = PseudoPotential(BaH_r, BaH_z, a_sc, q_sc, m_BaH)

    for t in range(timesteps):
        # Calculate the Coulomb potential energy
        CPE_Ba_total[t] = np.sum(CoulombPotential(Ba_x[t*N_Ba:(t+1)*N_Ba], Ba_y[t*N_Ba:(t+1)*N_Ba], Ba_z[t*N_Ba:(t+1)*N_Ba], N_Ba))
        CPE_BaH_total[t] = np.sum(CoulombPotential(BaH_x[t*N_BaH:(t+1)*N_BaH], BaH_y[t*N_BaH:(t+1)*N_BaH], BaH_z[t*N_BaH:(t+1)*N_BaH], N_BaH))
        for n in range(N_Ba):
            KE_Ba_total[t] += KE_Ba[t*N_Ba + n]
            KE_BaH_total[t] += KE_BaH[t*N_BaH + n]
            PPE_Ba_total[t] += PPE_Ba[t*N_Ba + n]
            PPE_BaH_total[t] += PPE_BaH[t*N_BaH + n]

    # Obtain the total energy
    energy = (KE_Ba_total + PPE_Ba_total + CPE_Ba_total + KE_BaH_total + PPE_BaH_total + CPE_BaH_total)/(10**(-3)*1.602*10**(-19))

    return energy


def plotEnergy(energy, title):
    
    figure, ax = plt.subplots(1, 1, figsize = (10,7))
    time = np.linspace(0, 3, len(energy))
    ax.plot(time, energy, '.', color = pantone)
    ax.set_xlabel("Time (ms)", **font, size = 18)
    ax.set_ylabel("Energy (meV)", **font, size = 18)

    par, cov = np.polyfit(time, energy, 1, full = False, cov = True)
    slope, intercept = par
    energySlopePerIntercept = (slope/intercept)*100
    energyInterceptError = (np.sqrt(cov[1, 1])/intercept)*100
    fit = np.polyval([slope, intercept], time)
    ax.plot(time, fit, '-', color = orange, linewidth = 3, label = "E = " + str(np.round(slope, 4)) + "t + " + str(np.round(intercept, 4)))
    print("Slope per intercept (check energy conservation): {}%".format(np.round(energySlopePerIntercept, 4)))
    print("Relative error in intercept (energy dispersion): {}%".format(np.round(energyInterceptError, 4)))
    plt.legend(prop={'size': 18})
    plt.savefig(title + ".pdf")
    plt.show()
    
    return energySlopePerIntercept, energyInterceptError


def TotalMomentum(Ba_vi, BaH_vi):
    """Find the total momentum in the i \in {x, y, z} direction
    in keV/c to check if it is conserved. """
    
    p_i = np.zeros(timesteps)
    
    for t in range(timesteps):
        for n in range(N_Ba):
            p_i[t] += (m_Ba * Ba_vi[t*N_Ba + n] + m_BaH * BaH_vi[t*N_Ba + n]) * (10**(-3)*c/charge)


    return p_i


def plotMomentum(px, py, pz, title):

    figure, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (25,7))
    time = np.linspace(0, 3, len(px))
    ax1.plot(time, px, '.', color = pantone)
    ax2.plot(time, py, '.', color = 'r')
    ax3.plot(time, pz, '.', color = 'g')
    ax1.set_xlabel("Time (ms)", **font, size = 18)
    ax1.set_ylabel("X-Momentum (keV/c)", **font, size = 18)
    ax2.set_xlabel("Time (ms)", **font, size = 18)
    ax2.set_ylabel("Y-Momentum (keV/c)", **font, size = 18)
    ax3.set_xlabel("Time (ms)", **font, size = 18)
    ax3.set_ylabel("Z-Momentum (keV/c)", **font, size = 18)

    slopeX, c = np.polyfit(time, px, 1)
    fit = np.polyval([slopeX, c], time)
    ax1.plot(time, fit, '-', color = orange, linewidth = 3, label = "p = " + str(np.round(slopeX, 4)) + "t + " + str(np.round(c, 4)))

    slopeY, c = np.polyfit(time, py, 1)
    fit = np.polyval([slopeY, c], time)
    ax2.plot(time, fit, '-', color = 'b', linewidth = 3, label = "p = " + str(np.round(slopeY, 4)) + "t + " + str(np.round(c, 4)))
    
    slopeZ, c = np.polyfit(time, pz, 1)
    fit = np.polyval([slopeZ, c], time)
    ax3.plot(time, fit, '-', color = orange, linewidth = 3, label = "p = " + str(np.round(slopeZ, 4)) + "t + " + str(np.round(c, 4)))

    ax1.legend(prop={'size': 18})
    ax2.legend(prop={'size': 18})
    ax3.legend(prop={'size': 18})

    plt.savefig(title + ".pdf")
    plt.show()

    return slopeX, slopeY, slopeZ


def plotConvergence(data, ylabel, title, analysis):
    
    figure, ax = plt.subplots(1, 1, figsize = (10,7))
    if analysis == "timesteps":
        #ax.axis([0, dt_array[-1]+tau, -0.1, 1])
        ax.plot(dt_array, data, 'o', color = pantone)
        ax.set_xscale('log')
        ax.set_xlabel("Timestep (s)", **font, size = 18)
        ax.set_xticks([0.1*tau, tau, 10*tau, 100*tau])
        ax.set_xticklabels([r'$0.1\tau$', r'$\tau$', r'$10\tau$', r'$100\tau$'])

    elif analysis == "particle number":
        #ax.axis([0, 2*N_array[-1]+1, -0.1, 1])
        ax.plot(2*N_array, data, 'o', color = pantone)
        ax.set_xlabel("Particle Number", **font, size = 18)

    ax.set_ylabel(ylabel, **font, size = 18)
    ax.set_title(title, **font, size = 18)
    plt.savefig(title+".pdf")
    plt.show()


def Compute(mode, dt, N):
    """Compute positions and velocities for three different
    cases with the same initial conditions.
    
    Args:
        mode (str): mode = "save" generates new initial conditions and saves them to npy files,
                    mode = "load" loads the saved initial conditions from the npy files.
                    This is to allow to run simulations with the same initial conditions but
                    different timesteps. 
    """

    global f_min, f_max

    Ba = Ion(m_Ba, N, temp, 'Ba', mode)
    BaH = Ion(m_BaH, N, temp, 'BaH', mode)

    #Laser Sweep
    v_max = np.mean(np.sqrt(Ba.vx**2 + Ba.vy**2 + Ba.vz**2)) # [m/s], maximal value of the velocity projection that will absorb laser photons
    v_min = (h*f_r)/(2*m_Ba*c) + (l_r*Gamma/2) # [m/s], recoil limit + 2xHWHM
    f_max = f_r/(1+(v_min/c))
    f_min = f_r/(1+(v_max/c))

    #PlotFrequencySweep()

    EvolveEuler(Ba, BaH, dt)

    del Ba, BaH


def Analyse(timestepTitle, particleNumberTitle):
    """Calculate and plot the temperature evolution
    for both species and different directions.

    Args:
        timestepTitle (str): include the simulation timestep to the plot pdf name.
    """

    with open('Positions.npy', 'rb') as f:
        Ba_x = np.load(f)
        Ba_y = np.load(f)
        Ba_z = np.load(f)
        BaH_x = np.load(f)
        BaH_y = np.load(f)
        BaH_z = np.load(f)

    with open('Speeds.npy', 'rb') as f:
        Ba_vx = np.load(f)
        Ba_vy = np.load(f)
        Ba_vz = np.load(f)
        BaH_vx = np.load(f)
        BaH_vy = np.load(f)
        BaH_vz = np.load(f)

    # Speeds
    Ba_v = np.sqrt(Ba_vx**2 + Ba_vy**2 + Ba_vz**2)
    BaH_v = np.sqrt(BaH_vx**2 + BaH_vy**2 + BaH_vz**2)

    totalEnergy = TotalEnergy(Ba_x, BaH_x, Ba_y, BaH_y, Ba_z, BaH_z, Ba_v, BaH_v)
    energySlopePerIntercept, energyInterceptError = plotEnergy(totalEnergy, "Energy, "+str(timestepTitle) + ", " + str(particleNumberTitle))

    #px = TotalMomentum(Ba_vx, BaH_vx)
    #py = TotalMomentum(Ba_vy, BaH_vy)
    #pz = TotalMomentum(Ba_vz, BaH_vz)
    #plotMomentum(px, py, pz, "Momentum, " + str(timestepTitle))

    # Plot momentum of a single particle for comparison to check if the momentum conservation is violated
    # px_single = np.zeros(timesteps)
    # py_single = np.zeros(timesteps)
    # pz_single = np.zeros(timesteps)
    # for t in range(timesteps):
    #     px_single[t] = (m_Ba * Ba_vx[t*N_Ba]) * (10**(-3)*c/charge)
    #     py_single[t] = (m_Ba * Ba_vy[t*N_Ba]) * (10**(-3)*c/charge)
    #     pz_single[t] = (m_Ba * Ba_vz[t*N_Ba]) * (10**(-3)*c/charge)
    
    # plotMomentum(px_single, py_single, pz_single, "Single Particle Momentum, dt = tau")

    return energySlopePerIntercept, energyInterceptError

# Fundamental constants
k_B = 1.381 * 10**(-23)
h = 6.626 * 10**(-34)
permittivity = 8.854 * 10**(-12)
c = 299792458 # [m/s]

# Particle constants
amu = 1.66 * 10**(-27) # atomic mass unit
m_Ba = 137.9 * amu # [kg], barium mass
m_BaH = 138.9 * amu # [kg], barium hydride mass
m_H = 1 * amu
charge = 1.602*10**(-19) # Ba+ and BaH+ charge

# Optical properties
l_r = 493.4 * 10**(-9) # [nm], resonance wavelength
f_r = c/l_r # [Hz], resonance frequency
tau = 7.8 * 10**(-9) # [s], lifetime of the excited state
Gamma = 1/(2*np.pi*tau) # [Hz], resonance full width, FWHM of the Lorentzian, 2xerror in resonance frequency

# Trap parameters
a_lc = -0.001 # For laser cooled Ba+
q_lc = 0.4 # For laser cooled Ba+
a_sc = a_lc * (m_Ba/m_BaH) # For sympathetically cooled BaH+
q_sc = q_lc * (m_Ba/m_BaH) # For sympathetically cooled BaH+
alpha = -0.0243 # Aarhus trap parameter
f = 0.5 * 10**6 # [Hz], RF frequency
w = 2*np.pi*f
r_0 = 0.0075 # [m], radius of the trap
U_endcap = a_lc*m_Ba*(w**2)*r_0**2/(4*charge*alpha) # [V], endcap DC voltage
V_RF = q_lc*m_Ba*(w**2)*r_0**2/(2*charge) # [V], RF voltage amplitude

# Simulation parameters
N_Ba =  5 # number of Ba+ particles
N_BaH = 5 # number of BaH+ particles
particles = N_Ba+N_BaH
R = 0.1*10**(-4) # [m], radius of the cylinder over which the particles are uniformly distributed
#dt = tau # [s], timestep, cannot be larger than 1/f = 2 * 10^(-6) s
time = 3*10**(-3) # [s], total simulation time in s
ms = int(time*10**(3)) # [ms], simulation time in ms

temp = 1 # [K], initial temperature

# Convergence parameters
t_step = 10**(-5) # [s], timestep to calculate the energy and momentum to check their conservation
timesteps = int(time/t_step) # number of convergence timesteps

# Plot parameters
pantone = (0, 0.2, 0.625) # Main CERN color
orange = (1, 0.4, 0.3) # For fits
font = {'fontname':'Sans-Serif'} # Font of the plot labels and titles
plt.rcParams['figure.dpi'] = 1000 # Resolution of the plots in the console
plt.rcParams['savefig.dpi'] = 1000 # Resolution of the plots when saving
plt.rcParams["patch.force_edgecolor"] = True # Turn on the bin edges
plt.rcParams['axes.grid'] = True # Turn the grid on
plt.rc('ytick', labelsize = 16)
plt.rc('xtick', labelsize = 16)

# Main code: run through different simulation timesteps to see
# how the momentum and energy conservation change

#Compute("save", 0.1*tau)

no_convergence = 10
dt_array = np.logspace(-1, 2, no_convergence)*tau
N_array = np.linspace(5, 50, no_convergence, dtype = int)

energySlopesPerIntercept = np.zeros(no_convergence)
energyInterceptErrors = np.zeros(no_convergence)
# Choose "timesteps" to analyse convergence for varying timesteps
# Choose "particle number" to analyse convergence for varying particle number
analysis = "timesteps"
# Can either save or load the slopes for analysis
mode = "save"

if mode == "save":
    # Generate the same initial conditions for all the timesteps
    Ba = Ion(m_Ba, N_Ba, temp, 'Ba', "save")
    BaH = Ion(m_BaH, N_BaH, temp, 'BaH', "save")

    for i in range(no_convergence):
        if analysis == "timesteps":
            Compute("load", dt_array[i], N_Ba) # Load the conditions that were previously saved
            energySlopesPerIntercept[i], energyInterceptErrors[i] = Analyse("dt = " + str(np.round(dt_array[i]/tau)) + "tau", "N = " + str(N_Ba+N_BaH))

        elif analysis == "particle number":
            Compute("save", tau, N_array[i]) # Cannot fix the same initial conditions for the varying particle number
            energySlopesPerIntercept[i], energyInterceptErrors[i] = Analyse("dt = 5tau", "N = " + str(N_array[i]))

    with open('Energy Slopes per Intercept.npy', 'wb') as f:
        np.save(f, energySlopesPerIntercept)
    with open('Energy Intercept Errors.npy', 'wb') as f:
        np.save(f, energyInterceptErrors)

elif mode == "load":
    with open('Energy Slopes per Intercept.npy', 'rb') as f:
        energySlopesPerIntercept = np.load(f)
    with open('Energy Intercept Errors.npy', 'rb') as f:
        energyInterceptErrors = np.load(f)

plotConvergence(energySlopesPerIntercept, "Slope per Intercept (%)", "Energy Slope Convergence", analysis)
plotConvergence(energyInterceptErrors, "Relative Intercept Error (%)", "Energy Intercept Convergence", analysis)
